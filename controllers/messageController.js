const { sendText, sendPaginatedText, sendTextWithBackButton, sendImage } = require("../config/whatsapp");
const MESSAGES = require("../utils/messages");
const allRows = require("../utils/allRows");

exports.handleMessage = async (message) => {
  const from = message.from;
  let text = "";

  // ЁЯФ╣ Handle normal text messages
  if (message.type === "text") {
    text = message.text.body.trim().toLowerCase();

    if (["hi", "hii", "hello", "vanakkam", "ji"].includes(text)) {
      await sendText(from, "ЁЯЩП ро╡рогроХрпНроХроорпН! роЕро░рпБро│рпНрооро┐роХрпБ ро╡роЯрокро┤роиро┐ роЖрогрпНроЯро╡ро░рпН родро┐ро░рпБроХрпНроХрпЛропро┐ро▓рпН родроЩрпНроХро│рпИ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒родрпБ!");
      await sendPaginatedText(from, "ЁЯЫХ роЖро▓роп родроХро╡ро▓рпН роорпЖройрпБ", "MAIN_MENU", allRows, 0);
      return;
    }

    await sendText(from, "тЪая╕П родрпЖро░ро┐ропро╛род роХроЯрпНроЯро│рпИ. родропро╡рпБроЪрпЖропрпНродрпБ 'hi' роЕро▓рпНро▓родрпБ 'ро╡рогроХрпНроХроорпН' роОройродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН.");
  }

  // ЁЯФ╣ Handle menu selections
  if (message.type === "interactive" && message.interactive.type === "list_reply") {
    const selectionId = message.interactive.list_reply.id;
    console.log("тЬЕ Selected:", selectionId);

    if (selectionId.startsWith("NEXT_MENU_")) {
      const nextIndex = parseInt(selectionId.split("_").pop());
      await sendPaginatedText(from, "ЁЯЫХ роЖро▓роп родроХро╡ро▓рпН роорпЖройрпБ", "MAIN_MENU", allRows, nextIndex);
      return;
    }

    if (selectionId === "BACK_TO_MAIN") {
      await sendPaginatedText(from, "ЁЯЫХ роЖро▓роп родроХро╡ро▓рпН роорпЖройрпБ", "MAIN_MENU", allRows, 0);
      return;
    }

    // ЁЯЦ╝я╕П If photo option is selected
    if (selectionId === "VADAPALANI_PHOTO") {
      const imageUrl = "https://your-domain.com/images/Sc0110101.png"; // replace with your public or local URL
      await sendImage(from, imageUrl, "ЁЯЩП роЕро░рпБро│рпНрооро┐роХрпБ ро╡роЯрокро┤роиро┐ роЖрогрпНроЯро╡ро░рпН родро┐ро░рпБро╡рпБро░рпБро╡роорпН ЁЯЩП");
      await sendTextWithBackButton(from, "ЁЯФЩ роорпБродройрпНроорпИ роорпЖройрпБро╡ро┐ро▒рпНроХрпБ родро┐ро░рпБроорпНрок ро╡рпЗрогрпНроЯрпБрооро╛?");
      return;
    }

    // Normal text menu responses
    const response = MESSAGES[selectionId] || "тЪая╕П родро╡ро▒ро╛рой ро╡ро┐ро░рпБрокрпНрокроорпН.";
    const combinedMessage = `${response}\n\nЁЯФЩ роорпБродройрпНроорпИ роорпЖройрпБро╡ро┐ро▒рпНроХрпБ родро┐ро░рпБроорпНрок ро╡рпЗрогрпНроЯрпБрооро╛?`;
    await sendTextWithBackButton(from, combinedMessage);
  }

  // ЁЯФ╣ Handle back button click
  if (message.type === "interactive" && message.interactive.type === "button_reply") {
    const buttonId = message.interactive.button_reply.id;
    if (buttonId === "BACK_TO_MAIN") {
      await sendPaginatedText(from, "ЁЯЫХ роЖро▓роп родроХро╡ро▓рпН роорпЖройрпБ", "MAIN_MENU", allRows, 0);
    }
  }
};
